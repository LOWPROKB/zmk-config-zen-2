#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define NUM_LAYER (1)
#define SYM_LAYER (2)
#define BLU_LAYER (3)
#define NAV_LAYER (4)
#define FN_LAYER (5)
#define UNUSED_LAYER (6)

//#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro (For now will keep off as "caps_word" seems to do this function better.

#define AS(keycode) &kp keycode  //defaulting all alpha keys to standard keypress

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        //zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        fc: force_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "FORCE_CAPS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&caps_word>;
        };

        home_row_thumb: home_row_thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_THUMB";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <175>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <1 13 25 26 14 2 3 15 27 28 16 4 5 17 29 36 38 24 12 0 30 31 32 33 34 35 7 8 9 10 19 20 21 22 6 7 8 9 10 11 18 19 20 21 22 23 31 32 33 39 40 41 37>;
            hold-trigger-on-release;
        };

        home_row_left: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 18 30 39 40 41 32 31 7 20 19 21 9 8 33 34 22 10 11 23 35 38 37 36>;
            hold-trigger-on-release;
        };

        sticky_key: sticky_key {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <900>;
            quick-release;
        };

        left_par_less_than: left_par_less_than {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_PAR_LESS_THAN";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        right_par_greater_than: right_par_greater_than {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_PAR_GREATER_THAN";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        left_bracket_brace: left_bracket_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_BRACKET_BRACE";
            bindings = <&kp LEFT_BRACKET>, <&kp LEFT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        right_bracket_brace: right_bracket_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_BRACKET_BRACE";
            bindings = <&kp RIGHT_BRACKET>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sticky_key LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        num_word: num_word {
            compatible = "zmk,behavior-caps-word";
            label = "NUM_WORD";
            #binding-cells = <0>;
            continue-list = <BACKSPACE DEL DOT COMMA PLUS MINUS STAR SLASH EQUAL>;
        };

        num_dance: num_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_DANCE";
            #binding-cells = <0>;
            bindings = <&num_word>, <&sl 1>;

            tapping-term-ms = <200>;
        };

        smart_num: smart_num {
            compatible = "zmk,behavior-hold-tap";
            label = "SMART_NUM";
            bindings = <&mo>, <&num_dance>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
        };

        home_row_right: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <50>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 38 37 36 40 39 41>;
        };

        sticky_hold: sticky_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_HOLD";
            bindings = <&kp>, <&sticky_key>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        home_row_left_shift: home_row_left_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            require-prior-idle-ms = <20>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 18 30 39 40 41 32 31 7 20 19 21 9 8 33 34 22 10 11 23 35 38 37 36>;
            hold-trigger-on-release;
        };

        home_row_right_shift: home_row_right_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT_SHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            require-prior-idle-ms = <20>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 38 37 36 40 39 41>;
        };

        home_row_left_gui: home_row_left_gui {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_LEFT_GUI";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 18 30 39 40 41 32 31 7 20 19 21 9 8 33 34 22 10 11 23 35 38 37 36>;
            hold-trigger-on-release;
        };

        home_row_right_gui: home_row_right_gui {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_RIGHT_GUI";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 38 37 36 40 39 41>;
        };

        layer_tap_left: layer_tap_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_LEFT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 39 40 41>;
            flavor = "balanced";
        };

        layer_tap_right: layer_tap_right {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_RIGHT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <120>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 38 37 36>;
            flavor = "balanced";
        };

        period_para: period_para {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_PARA";
            bindings = <&kp PERIOD>, <&kp LEFT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        shift_tap: shift_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_TAP";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_SHIFT>, <&caps_word>;

            tapping-term-ms = <100>;
        };

        capsword_tap: capsword_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPSWORD_TAP";
            bindings = <&caps_word>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "hold-preferred";
        };

        dash_space: dash_space {
            compatible = "zmk,behavior-mod-morph";
            label = "DASH_SPACE";
            bindings = <&kp MINUS>, <&kp SPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lt { tapping-term-ms = <200>; };
    };

    macros {
        bt0_to_l0: bt0_to_l0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0 &to 0>;
            label = "BT0_TO_L0";
        };

        bt1_to_l0: bt1_to_l0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &to 0>;
            label = "BT1_TO_L0";
        };

        bt2_to_l0: bt2_to_l0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &to 0>;
            label = "BT2_TO_L0";
        };

        bt3_to_l0: bt3_to_l0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &to 0>;
            label = "BT3_TO_L0";
        };

        bt4_to_l0: bt4_to_l0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &to 0>;
            label = "BT4_TO_L0";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <30 29>;
            timeout-ms = <100>;
            layers = <3>;
        };

        combo_caps {
            bindings = <&caps_word>;
            key-positions = <18 40>;
            layers = <0>;
            timeout-ms = <75>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "MAIN";
            bindings = <
&trans  &kp Q                          &kp W                      &kp E                   &kp R                              &kp T          &kp Y                     &kp U                                &kp I                    &kp O                       &kp P                                     &trans
&trans  &home_row_left_gui LEFT_GUI A  &home_row_left LEFT_ALT S  &home_row_left LCTRL D  &home_row_left_shift LEFT_SHIFT F  &kp G          &kp H                     &home_row_right_shift RIGHT_SHIFT J  &home_row_right RCTRL K  &home_row_right LEFT_ALT L  &home_row_right_gui RIGHT_GUI APOSTROPHE  &trans
&trans  &kp Z                          &kp X                      &kp C                   &kp V                              &kp B          &kp N                     &kp M                                &kp COMMA                &kp DOT                     &kp FSLH                                  &trans
                                                                  &mt SPACE TAB           &mt LEFT_ALT ESCAPE                &lt 4 SPACE    &layer_tap_right 2 ENTER  &layer_tap_right 1 BACKSPACE         &lt 5 DELETE
            >;
        };

        NUM {
            label = "NUM";
            bindings = <
&trans  &kp LEFT_BRACKET  &kp N7                            &kp N8                   &kp N9        &kp RIGHT_BRACKET    &kp BACKSPACE  &trans           &trans     &trans            &trans         &trans
&trans  &kp SEMI          &home_row_left LEFT_ALT NUMBER_4  &home_row_left LCTRL N5  &kp N6        &kp EQUAL            &caps_word     &kp RIGHT_SHIFT  &kp RCTRL  &kp LALT          &kp RIGHT_GUI  &trans
&trans  &kp GRAVE         &kp N1                            &kp N2                   &kp N3        &kp BACKSLASH        &trans         &kp SPACE        &trans     &kp GREATER_THAN  &trans         &trans
                                                            &period_para             &kp NUMBER_0  &kp MINUS            &trans         &trans           &trans
            >;
        };

        SYM {
            label = "SYM";
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND  &kp STAR              &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE    &trans      &trans     &trans     &trans    &trans         &trans
&trans  &kp COLON       &kp DOLLAR     &kp PERCENT           &kp CARET              &kp PLUS           &caps_word  &kp LSHFT  &kp LCTRL  &kp LALT  &kp RIGHT_GUI  &trans
&trans  &kp TILDE       &kp EXCL       &kp AT                &kp POUND              &kp PIPE           &trans      &trans     &trans     &trans    &trans         &trans
                                       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDER          &trans      &trans     &trans
            >;
        };

        BLU {
            label = "BLU";
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &bt0_to_l0    &bt1_to_l0    &bt2_to_l0    &bt3_to_l0    &bt4_to_l0      &bt0_to_l0    &bt1_to_l0    &bt2_to_l0    &bt3_to_l0    &bt4_to_l0    &trans
&trans  &trans        &trans        &trans        &trans        &bt BT_CLR      &bt BT_CLR    &trans        &trans        &trans        &trans        &trans
                                    &trans        &to 0         &trans          &trans        &to 0         &trans
            >;
        };

        NAV {
            label = "NAV";
            bindings = <
&trans  &kp LC(A)     &trans     &trans     &trans     &trans           &kp INS       &kp HOME  &kp PAGE_UP    &kp LC(PAGE_DOWN)  &kp LC(END)  &trans
&trans  &kp LEFT_GUI  &kp LALT   &kp LCTRL  &kp LSHFT  &kp ENTER        &kp CAPSLOCK  &kp LEFT  &kp DOWN       &kp UP_ARROW       &kp RIGHT    &trans
&trans  &kp LC(Z)     &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp BACKSPACE    &kp INS       &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP        &kp END      &trans
                                 &trans     &trans     &trans           &trans        &trans    &trans
            >;
        };

        FN {
            label = "FN";
            bindings = <
&trans  &kp F12  &kp F7  &kp F8              &kp F9     &kp PRINTSCREEN    &trans  &trans     &trans     &trans    &trans         &trans
&trans  &kp F11  &kp F4  &kp F5              &kp F6     &kp SCROLLLOCK     &trans  &kp RSHFT  &kp RCTRL  &kp LALT  &kp RIGHT_GUI  &trans
&trans  &kp F10  &kp F1  &kp F2              &kp F3     &kp PAUSE_BREAK    &trans  &trans     &trans     &trans    &trans         &trans
                         &kp K_CONTEXT_MENU  &kp SPACE  &to 3              &trans  &trans     &trans
            >;
        };
    };
};
